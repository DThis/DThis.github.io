<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Thread | cout << Blog << endl;]]></title>
  <link href="http://blog.iTian.mobi/blog/categories/thread/atom.xml" rel="self"/>
  <link href="http://blog.iTian.mobi/"/>
  <updated>2015-01-03T19:22:01+08:00</updated>
  <id>http://blog.iTian.mobi/</id>
  <author>
    <name><![CDATA[TZ]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mutex in Minute]]></title>
    <link href="http://blog.iTian.mobi/blog/2014/09/25/mutex-in-minute/"/>
    <updated>2014-09-25T20:57:16+08:00</updated>
    <id>http://blog.iTian.mobi/blog/2014/09/25/mutex-in-minute</id>
    <content type="html"><![CDATA[<p>stl containers are not safe in threads.</p>

<p>Now,with new lambda in C++11.We can make safe containers in minimal codes.</p>

<p>Below is a safe Vector.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;thread&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">SafeVec</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">type</span><span class="o">&gt;</span> <span class="n">vec</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">mutex</span> <span class="n">mut</span><span class="p">;</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">SafeVec</span><span class="p">(){};</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">doWith</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">void</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">type</span><span class="o">&gt;*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">func</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">mut</span><span class="p">.</span><span class="n">lock</span><span class="p">();</span>
</span><span class='line'>        <span class="n">func</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">vec</span><span class="p">);</span>
</span><span class='line'>        <span class="n">mut</span><span class="p">.</span><span class="n">unlock</span><span class="p">();</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></type></type></typename></vector></thread></p>

<p>Key points:</p>

<ul>
  <li>Create function with a lambda parameter.Call this lambda within mutex context.</li>
  <li>The lambdaâ€™s parameter should be a reference,thus,it can be changed,or just change the copy.</li>
  <li>No need to create other functions used <code>mut</code>.If you do,Never use it in the parameter lambda func.</li>
</ul>
]]></content>
  </entry>
  
</feed>
