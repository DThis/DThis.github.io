<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Game | cout << Blog << endl;]]></title>
  <link href="http://blog.iTian.mobi/blog/categories/game/atom.xml" rel="self"/>
  <link href="http://blog.iTian.mobi/"/>
  <updated>2015-01-03T19:22:01+08:00</updated>
  <id>http://blog.iTian.mobi/</id>
  <author>
    <name><![CDATA[TZ]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[State Machine in Game Development]]></title>
    <link href="http://blog.iTian.mobi/blog/2014/09/04/state-machine-in-game-development/"/>
    <updated>2014-09-04T21:02:56+08:00</updated>
    <id>http://blog.iTian.mobi/blog/2014/09/04/state-machine-in-game-development</id>
    <content type="html"><![CDATA[<p>In game server.Generally, use state machine to deal with game states changes and resoures.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">currentState</span> <span class="o">==</span> <span class="n">state1</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">//validate socket,player</span>
</span><span class='line'>    <span class="c1">//deal state change</span>
</span><span class='line'><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="n">currentState</span> <span class="o">==</span> <span class="n">state2</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">//validate socket,player</span>
</span><span class='line'>    <span class="c1">//deal state change</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//some other states</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Implementation by using if statement is not good.Will mess logic.
States dealings should be wrapped in functions.Itâ€™s more clear,and will reduce the state check executing.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">Player</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="nf">void</span><span class="p">(</span><span class="o">*</span><span class="n">StateFunction</span><span class="p">)(</span><span class="n">Player</span> <span class="o">*</span><span class="n">player</span><span class="p">);</span>
</span><span class='line'><span class="k">enum</span> <span class="n">StateIndex</span><span class="p">{</span>
</span><span class='line'>    <span class="n">StateIndexInit</span><span class="p">,</span>
</span><span class='line'>    <span class="n">StateIndexRound1</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">statefunction</span><span class="o">&gt;</span> <span class="n">states</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">currentState</span> <span class="o">=</span> <span class="n">StateIndexInit</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">statefunction</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">state1</span><span class="p">(</span><span class="n">Player</span> <span class="o">*</span><span class="n">player</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//validate player</span>
</span><span class='line'>    <span class="c1">//deal with state changes</span>
</span><span class='line'>    <span class="c1">//if state1 is complete,then set currentState to other index</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="n">state2</span><span class="p">(</span><span class="n">Player</span> <span class="o">*</span><span class="n">player</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//validate player</span>
</span><span class='line'>    <span class="c1">//deal with state changes</span>
</span><span class='line'>    <span class="c1">//if state2 is complete,then set currentState to other index</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">initGame</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">states</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">state1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">states</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">state2</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// and some others</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">play</span><span class="p">(</span><span class="n">Player</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">player</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="n">states</span><span class="p">[</span><span class="n">currentState</span><span class="p">]))(</span><span class="n">player</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
